name: üöÄ Deploy Pins API

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "prod"
        type: choice
        options:
          - prod

jobs:
  build:
    name: üî® Build
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.save_image_name.outputs.image_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: services/pins-api/package-lock.json

      - name: Install dependencies
        working-directory: services/pins-api
        run: npm ci

      - name: Build application
        working-directory: services/pins-api
        run: npm run build

      - name: Setup Google Cloud SDK
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for GCP Artifact Registry
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Authorize Docker push to Artifact Registry
        run: gcloud auth configure-docker europe-central2-docker.pkg.dev

      - name: Build and push Docker image
        working-directory: services/pins-api
        id: save_image_name
        run: |
          # Create Dockerfile
          cat > Dockerfile << EOF
          FROM node:20-alpine
          WORKDIR /app

          # Copy package files
          COPY package*.json ./

          # Install production dependencies only
          RUN npm ci --omit=dev

          # Copy build files
          COPY build ./build

          # Set NODE_ENV
          ENV NODE_ENV=production

          # Expose the port
          EXPOSE 8080

          # Command to run the application
          CMD ["node", "build/src/main.js"]
          EOF


          # Set repository path
          REPO_PATH="europe-central2-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/make-your-pins"

          # Build the Docker image
          docker build -t ${REPO_PATH}/pins-api:${{ github.sha }} .

          # Also tag as latest
          docker tag ${REPO_PATH}/pins-api:${{ github.sha }} ${REPO_PATH}/pins-api:latest

          # Push both tags
          docker push ${REPO_PATH}/pins-api:${{ github.sha }}
          docker push ${REPO_PATH}/pins-api:latest

          # Save the image name as an output (this is correct)
          echo "image_name=${REPO_PATH}/pins-api:${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy:
    name: üöÄ Deploy
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to Cloud Run
        run: |
          # Debug the image name
          echo "Image name from build job: '${{ needs.build.outputs.image_name }}'"

          # Set a default image if the output is empty
          IMAGE="${{ needs.build.outputs.image_name }}"
          if [ -z "$IMAGE" ]; then
            echo "WARNING: Image name is empty, using default image"
            IMAGE="europe-central2-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/make-your-pins/pins-api:latest"
          fi

          # Deploy with the image
          gcloud run deploy pins-api \
            --image="$IMAGE" \
            --region=europe-central2 \
            --platform=managed \
            --allow-unauthenticated \
            --memory=512Mi \
            --cpu=1 \
            --concurrency=80 \
            --max-instances=2 \
            --min-instances=0 \
            --set-env-vars="NODE_ENV=production"

          # Get the deployed URL
          URL=$(gcloud run services describe pins-api --region=europe-central2 --format='value(status.url)')
          echo "DEPLOYED_URL=$URL" >> $GITHUB_ENV

  notify:
    name: üì¢ Notify
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send Success Discord notification
        uses: sarisia/actions-status-discord@v1
        if: ${{ !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') }}
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "‚úÖ API Deployment Completed"
          description: "Pins API has been successfully deployed to Cloud Run at ${{ env.DEPLOYED_URL }}"
          color: 0x57F287 # Green

      - name: Send Failure Discord notification
        uses: sarisia/actions-status-discord@v1
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "‚ùå API Deployment Failed"
          description: "There was a problem deploying the Pins API to Cloud Run"
          color: 0xED4245 # Red

name: ⚛ Deploy Client App

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "prod"
        type: choice
        options:
          - prod

jobs:
  build:
    name: 🔨 Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: services/client-app/package-lock.json

      - name: Install dependencies
        working-directory: services/client-app
        run: npm ci

      - name: Build application
        working-directory: services/client-app
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: services/client-app/dist/
          retention-days: 1

  test:
    name: 🧪 Test
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: services/client-app/package-lock.json

      - name: Install dependencies
        working-directory: services/client-app
        run: npm ci

      - name: Run tests
        working-directory: services/client-app
        run: npm test || echo "No tests found, continuing deployment"

  deploy:
    name: 🚀 Deploy
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: services/client-app/dist/

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Get Compute Engine IP
        id: get-ip
        run: |
          IP=$(gcloud compute instances describe client-app-instance --zone=europe-central2-a --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          echo "INSTANCE_IP=$IP" >> $GITHUB_ENV

      - name: Create deployment package
        run: |
          cd services/client-app/dist
          tar -czf ../../../client-app-build.tar.gz .

      - name: Setup SSH
        run: |
          echo "${{ secrets.GCP_SSH_PRIVATE_KEY }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key

      - name: Deploy to Compute Engine
        run: |
          # Copy the build to the instance
          scp -i /tmp/ssh_key -o StrictHostKeyChecking=no client-app-build.tar.gz ${{ secrets.GCP_SSH_USER }}@${{ env.INSTANCE_IP }}:/tmp/

          # SSH into the instance and deploy the build
          ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no ${{ secrets.GCP_SSH_USER }}@${{ env.INSTANCE_IP }} << 'EOF'
            # Extract the build to the web root
            sudo rm -rf /var/www/html/*
            sudo tar -xzf /tmp/client-app-build.tar.gz -C /var/www/html/
            sudo chown -R www-data:www-data /var/www/html
            sudo chmod -R 755 /var/www/html

            # Clean up
            rm /tmp/client-app-build.tar.gz

            # Restart nginx
            sudo systemctl restart nginx
          EOF

  notify:
    name: 📢 Notify
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send Success Discord notification
        uses: sarisia/actions-status-discord@v1
        if: ${{ !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') }}
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "✅ Deployment Completed"
          description: "Client app has been successfully deployed"
          color: 0x57F287 # Green

      - name: Send Failure Discord notification
        uses: sarisia/actions-status-discord@v1
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "❌ Deployment Failed"
          description: "There was a problem deploying the client app"
          color: 0xED4245 # Red
